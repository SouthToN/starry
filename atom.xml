<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://southton.github.io/starry</id>
    <title>Starry</title>
    <updated>2021-04-03T08:54:51.663Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://southton.github.io/starry"/>
    <link rel="self" href="https://southton.github.io/starry/atom.xml"/>
    <logo>https://southton.github.io/starry/images/avatar.png</logo>
    <icon>https://southton.github.io/starry/favicon.ico</icon>
    <rights>All rights reserved 2021, Starry</rights>
    <entry>
        <title type="html"><![CDATA[设计模式--单例模式&工厂模式]]></title>
        <id>https://southton.github.io/starry/post/she-ji-mo-shi-dan-li-mo-shi-andgong-han-mo-shi/</id>
        <link href="https://southton.github.io/starry/post/she-ji-mo-shi-dan-li-mo-shi-andgong-han-mo-shi/">
        </link>
        <updated>2021-04-03T08:52:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="单例模式">单例模式</h3>
<p>应用场合：有些对象只需要一个就足够了</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/08/27/AQHvJOhTS7dDUPI.png" alt="QQ截图20200821142444.png" loading="lazy"></figure>
<p>实现方式：将类的构造方法私有化，不允许外部直接创建对象，那么怎么保证只有一个对象呢，有下面两种实现方式</p>
<p>常用的两种单例模式</p>
<h5 id="饿汉模式">饿汉模式</h5>
<pre><code class="language-java">public class Singleton{
    // 1、将类的构造方法私有化，不允许外部直接创建对象
    private Singleton(){}
    // 2、创建类的唯一实例，使用private static修饰
    private static Singleton instance = new Singleton();
    // 3、提供一个用于获取实例的方法，使用public static修饰
    public static Singleton getInstance(){
        return instance;
    }
}
</code></pre>
<p>唯一的实例使用static修饰的，所以在当前类加载的时候就会实例化这个唯一实例，不管用户是否调用当前获取实例的方法它都已经实例化好了</p>
<h5 id="懒汉模式">懒汉模式</h5>
<p>唯一的实例使用static修饰的，所以在当前类加载的时候只会声明这个实例，并不会去实例化它，之后在第一个用户调用获取实例的方法时才会去实例化这个实例，后面的用户再调用获取实例的方法时，当前的实例不会再为null，故直接返回实例化好了的实例。</p>
<pre><code class="language-java">public class Singleton{
    // 1、将类的构造方法私有化，不允许外部直接创建对象
    private Singleton(){}
    // 2、声明类的唯一实例，使用private static修饰
    private static Singleton instance;
    // 3、提供一个用于获取实例的方法，使用public static修饰,
    public static Singleton getInstance(){
        if(instance==null){
            instance = new Singleton();
        }
        return instance;
    }
}
</code></pre>
<p>区别：懒汉与饿汉的区别就在类的唯一对象在什么时候实例化，</p>
<p>调用获取方法之前就已经实例化了的是饿汉，调用的时候再创建就是懒汉。</p>
<p>这个区别也导致</p>
<p>饿汉加载类时比较慢，但获取对象快，懒汉加载类时比较快，获取对象慢</p>
<p>饿汉线程安全，懒汉线程不安全</p>
<p><strong>懒汉模式线程安全的三种写法：</strong></p>
<pre><code class="language-java">/*
 * 懒汉模式
 * 线程安全的写法1
 * 线程虽然安全了，但是性能差
 * 同步的代价必然会一定程度的使程序的并发度降低。
 * */

public class singleInstanceLAN2 {
    private singleInstanceLAN2(){
        System.out.println(&quot;create&quot;);
    }

    private static singleInstanceLAN2 instance;

    public static  synchronized singleInstanceLAN2 getInstance(){
        if (instance==null) instance = new singleInstanceLAN2();
        return instance;
    }
}

</code></pre>
<pre><code class="language-java">/*
 * 懒汉模式
 * 线程安全的写法2
 * 线程安全同时提高性能
 * 可以想办法把同步的粒度降低，只在初始化对象的时候进行同步
 * */

public class singleInstanceLAN3 {
    private singleInstanceLAN3(){}

    private static singleInstanceLAN3 instance;

    public static singleInstanceLAN3 getInstance(){
        if (instance==null){
            synchronized (singleInstanceLAN3.class){
                if (instance==null) instance = new singleInstanceLAN3();
            }
        }
        return instance;
    }
}
</code></pre>
<pre><code class="language-java">/*
 * 懒汉模式
 * 最厉害的写法
 *这里又要提出一种新的模式——Initialization on Demand Holder.
 * 这种方法使用内部类来做到延迟加载对象，
 * 在初始化这个内部类的时候，JLS(Java Language Sepcification)会保证这个类的线程安全。
 * 这种写法最大的美在于，完全使用了Java虚拟机的机制进行同步保证，没有一个同步的关键字。
 * */
public class singleInstanceLAN4 {
    private static class SingletonHolder
    {
        public final static singleInstanceLAN4 instance = new singleInstanceLAN4();
    }

    public static singleInstanceLAN4 getInstance()
    {
        return SingletonHolder.instance;
    }
}

</code></pre>
<h3 id="工厂模式">工厂模式</h3>
<p>实例化对象的时候，用工厂方法代替new操作，</p>
<p>工厂模式包括工厂方法模式和抽象工厂模式</p>
<p>抽象工厂模式是工厂方法模式的扩展</p>
<p>应用场合：有一组类似的对象需要创建，但是在编码是不能预见需要创建哪种类的实例</p>
<p><strong>意图</strong>：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>
主要解决：主要解决接口选择的问题。<br>
何时使用：我们明确地计划不同条件下创建不同实例时。<br>
如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。<br>
关键代码：创建过程在其子类执行。<br>
应用实例： 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。</p>
<p><strong>优点</strong>： 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p><strong>缺点</strong>：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<p><strong>使用场景</strong>： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，&quot;POP3&quot;、&quot;IMAP&quot;、&quot;HTTP&quot;，可以把这三个作为产品类，共同实现一个接口。</p>
<p><strong>注意事项</strong>：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<p>code：</p>
<p>定义一个接口：</p>
<pre><code class="language-java">package factory;

public interface Shape {
    void draw();
}
</code></pre>
<p>不同的类继承这个接口</p>
<pre><code class="language-java">package factory;

public class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println(&quot;Inside Circle::draw() method.&quot;);
    }
}
</code></pre>
<pre><code class="language-java">package factory;

public class Rectangle implements Shape{
    @Override
    public void draw() {
        System.out.println(&quot;Inside Rectangle::draw() method.&quot;);
    }
}
</code></pre>
<pre><code class="language-java">package factory;

public class Square implements Shape{
    @Override
    public void draw() {
        System.out.println(&quot;Inside Square::draw() method.&quot;);
    }
}
</code></pre>
<p>根据名称生产不同的对象</p>
<pre><code class="language-java">package factory;

public class ShapeFactory {
    //使用 getShape 方法获取形状类型的对象
    public Shape getShape(String shapeType){
        if(shapeType == null){
            return null;
        }
        if(shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;)){
            return new Circle();
        } else if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;)){
            return new Rectangle();
        } else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;)){
            return new Square();
        }
        return null;
    }
}
</code></pre>
<p>根据名称直接使用对象，不用我们自己new了</p>
<pre><code class="language-java">package factory;

public class FactoryPatternDemo {
    public static void main(String[] args) {
        ShapeFactory shapeFactory = new ShapeFactory();

        //获取 Circle 的对象，并调用它的 draw 方法
        Shape shape1 = shapeFactory.getShape(&quot;CIRCLE&quot;);

        //调用 Circle 的 draw 方法
        shape1.draw();

        //获取 Rectangle 的对象，并调用它的 draw 方法
        Shape shape2 = shapeFactory.getShape(&quot;RECTANGLE&quot;);

        //调用 Rectangle 的 draw 方法
        shape2.draw();

        //获取 Square 的对象，并调用它的 draw 方法
        Shape shape3 = shapeFactory.getShape(&quot;SQUARE&quot;);

        //调用 Square 的 draw 方法
        shape3.draw();
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day40： 替换所有的问号]]></title>
        <id>https://southton.github.io/starry/post/day40/</id>
        <link href="https://southton.github.io/starry/post/day40/">
        </link>
        <updated>2020-09-07T07:16:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-替换所有的问号">一、替换所有的问号</h3>
<p>题目描述：输入一个字符串，将字符串中？替换成一个小写字母，要求这个字母不能与其前一个和后一个字母相同。<br>
来源：<a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/">力扣1576：替换所有的问号</a></p>
<p>思路：将字符串转换为字符串数组，循环遍历其中的每一个元素，判断其是否是'?'，不是继续下一次循环，是判断其前后字母，大致步骤：</p>
<ul>
<li>将字符串转换为stringbuffer，并在最后追加一个？，因为需要判断其前后字母，这种遍历条件无法遍历到最后一个字符{for (int i = 0; i+1 &lt; strChar.length; i++) }</li>
<li>将stringbuffer转为字符串，再转为字符数组</li>
<li>遍历每一个字符，判断其是否是'?'，不是则继续遍历下一个字符，是则继续判断其是否是第一个字符，是则找到一个与下一个字符不相同的字符，来替换掉当前的'?'，不是第一个则需要找到一个与当前'?'前后的字符都不相等的字符，替换掉当前问号。</li>
<li>替换完毕，将字符数组转为字符串，再将字符串转为stringbuffer</li>
<li>删除最后一个字符，这个字符的作用就是让算法能够遍历到最后一个字符</li>
<li>将stringbuffer转为字符串并返回<br>
code：</li>
</ul>
<pre><code>public class replaceString {
    public static String re(String str){
        if (str.length()==0) return str;
        StringBuffer sb = new StringBuffer(str);
        sb.append(&quot;?&quot;);
        char[] strChar=sb.toString().toCharArray();// 将字符串转换为字符串数组；
        for (int i = 0; i+1 &lt; strChar.length; i++) {
            if (strChar[i]!='?') continue;//跳出本次循环，进入下一次循环，循环未结束
            for (char j = 'a'; j &lt;='z' ; j++) {
                if(i==0 &amp;&amp; strChar[i+1]!=j){//第一个字母是'?',找到跟下一个字母不相同的字母
                    strChar[i] = j;//替换
                    break;//退出当前循环，循环结束
                }else if (i&gt;0 &amp;&amp;strChar[i-1]!=j &amp;&amp; strChar[i+1]!=j){
                    strChar[i] = j;
                    break;
                }
            }
        }
        str = new String(strChar);//将字符数组转字符串
        sb = new StringBuffer(str);
        sb.deleteCharAt(str.length()-1);
        String res = String.valueOf(sb);
        return res;
    }   
}

</code></pre>
<p>tips：字符串和字符数组互转的方法</p>
<pre><code>        /*字符串转字符数组*/
        chars = s.toCharArray();
        
        /*字符数组转字符串*/

        // 方法一
        s = new String(chars);
        //方法二
        s = String.valueOf(chars);
        //方法三
        StringBuffer sb =new StringBuffer();
        for (char c:chars) {
            sb.append(c);
        }
        s = sb.toString();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day39： 判断能否形成等差数列]]></title>
        <id>https://southton.github.io/starry/post/day39/</id>
        <link href="https://southton.github.io/starry/post/day39/">
        </link>
        <updated>2020-07-05T03:15:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-判断能否形成等差数列">一、判断能否形成等差数列</h3>
<p>给你一个数字数组 arr 。<br>
如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 等差数列 。<br>
如果可以重新排列数组形成等差数列，请返回 true ；否则，返回 false 。<br>
示例 1：<br>
输入：arr = [3,5,1]<br>
输出：true<br>
解释：对数组重新排序得到 [1,3,5] 或者 [5,3,1] ，任意相邻两项的差分别为 2 或 -2 ，     可以形成等差数列。</p>
<p>示例 2：<br>
输入：arr = [1,2,4]<br>
输出：false<br>
解释：无法通过重新排序得到等差数列。</p>
<p>来源：<a href="https://leetcode-cn.com/contest/weekly-contest-196/problems/can-make-arithmetic-progression-from-sequence/">力扣：判断能否形成等差数列</a></p>
<p>思路：力扣196场周赛的第一题，看到这题第一想法就是排序+计算数列的公差，这里我用了快排对数组进行排序，使用HashSet来存储数组的公差，如果是等差数组则set中只会有一个值，即就是数字的公差。<br>
code：</p>
<pre><code>class Solution {
   public static boolean canMakeArithmeticProgression(int[] arr) {
        int l=0;
        int r=arr.length-1;
        quickp(arr,l,r);        
        HashSet&lt;Integer&gt; cha = new HashSet&lt;Integer&gt;();
        for(int i = 0;i&lt;r;i++){
           int temp =arr[i+1]-arr[i];
           cha.add(temp);
        }
        if(cha.size()==1){
            return true;
        } else{
            return false;
        }
       
    }
    
    static void quickp(int[] nums,int l, int r){        
        int left = l, right = r;        
        while(left&lt;right){
            int mid = nums[left];
            while(left&lt;right &amp;&amp; nums[right]&gt;=mid)  right--;  //找到右边比mid值小的位置            
            nums[left] = nums[right];            
            while(left&lt;right &amp;&amp; nums[left]&lt;mid) left++; //找到左边比mid值大的位置  
            nums[right] = nums[left];
            nums[left] = mid;
            quickp(nums, l, left);
            quickp(nums, left+1, r);
        }
    }
}
</code></pre>
<h4 id="review">review</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP13 最长回文子序列]]></title>
        <id>https://southton.github.io/starry/post/dp13/</id>
        <link href="https://southton.github.io/starry/post/dp13/">
        </link>
        <updated>2020-05-06T04:14:42.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个字符串s，找到其中最长的回文子序列。可以假设s的最大长度为1000。<br>
示例 1:<br>
输入: &quot;bbbab&quot;<br>
输出: 4<br>
一个可能的最长回文子序列为 &quot;bbbb&quot;。</p>
<p>示例 2:<br>
输入: &quot;cbbd&quot;<br>
输出: 2<br>
一个可能的最长回文子序列为 &quot;bb&quot;。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence">力扣：最长回文子序列</a></p>
<p>思路：<br>
1、定义动态数组的含义，定义dp[i][j]表示s中从i到j所能构成的最长回文序列长度<br>
2、找数组元素之间的关系<br>
当s中第i个字符和第j个字符相同时:</p>
<pre><code> dp[i][j] = dp[i+1][j-1] +2;
</code></pre>
<p>当s中第i个字符和第j个字符不同时:</p>
<pre><code>dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);
</code></pre>
<p>3、初始化<br>
dp[i][i] = 1; 单个字符能构成的回文序列长度为1<br>
code：</p>
<pre><code>class Solution {
    public int longestPalindromeSubseq(String s) {
        int len = s.length();
        int [][] dp = new int[len][len];
        for(int i = len-1;i&gt;=0;i--){
            dp[i][i] = 1;
            for(int j = i+1;j&lt;len;j++){
                if(s.charAt(i)==s.charAt(j)){
                    dp[i][j] = dp[i+1][j-1] +2;
                }else{
                    dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);
                }
            }
        }
        return dp[0][len-1];
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP12 正则表达式匹配]]></title>
        <id>https://southton.github.io/starry/post/dp12/</id>
        <link href="https://southton.github.io/starry/post/dp12/">
        </link>
        <updated>2020-05-05T13:14:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="正则表达式匹配">正则表达式匹配</h3>
<p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。</p>
<ul>
<li>'.' 匹配任意单个字符</li>
<li>'*' 匹配零个或多个前面的那一个元素<br>
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</li>
</ul>
<p>说明:</p>
<ul>
<li>s 可能为空，且只包含从 a-z 的小写字母。</li>
<li>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</li>
</ul>
<p>示例 1:<br>
输入:<br>
s = &quot;aa&quot;<br>
p = &quot;a&quot;<br>
输出: false<br>
解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</p>
<p>示例 2:<br>
输入:<br>
s = &quot;aa&quot;<br>
p = &quot;a*&quot;<br>
输出: true<br>
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 &quot;aa&quot; 可被视为 'a' 重复了一次。</p>
<p>示例 3:<br>
输入:<br>
s = &quot;ab&quot;<br>
p = &quot;.<em>&quot;<br>
输出: true<br>
解释: &quot;.</em>&quot; 表示可匹配零个或多个（'*'）任意字符（'.'）。</p>
<p>示例 4:<br>
输入:<br>
s = &quot;aab&quot;<br>
p = &quot;c<em>a</em>b&quot;<br>
输出: true<br>
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 &quot;aab&quot;。</p>
<p>示例 5:<br>
输入:<br>
s = &quot;mississippi&quot;<br>
p = &quot;mis<em>is</em>p*.&quot;<br>
输出: false</p>
<p>来源：<a href="https://leetcode-cn.com/problems/regular-expression-matching">力扣：正则表达式匹配</a></p>
<p>思路：<br>
1、定义动态数组的含义，定义dp[i][j]表示s的前i个元素能否被p的前j个元素匹配<br>
2、找数组元素之间的关系<br>
当p[j] = '*'时:</p>
<pre><code>dp[i+1][j+1] = dp[i+1][j-1] || (dp[i][j+1] &amp;&amp; (s.charAt(i)==p.charAt(j-1) || p.charAt(j-1) == '.')) ;
</code></pre>
<p>当p[j] ！= '*'时:</p>
<pre><code>dp[i+1][j+1] = dp[i][j]  &amp;&amp; (s.charAt(i)==p.charAt(j) || p.charAt(j) == '.') ;
</code></pre>
<p>3、初始化<br>
当s和p均为空，匹配 即dp[0][0] = true<br>
当s为空p不为空时，dp[0][i] = p.charAt(i-1) == '*' &amp;&amp; dp[0][i-2];<br>
当p为空时，dp[i][0] = false,java布尔数组初始值即为false，所以不必单独处理<br>
code：</p>
<pre><code>class Solution {
    public boolean isMatch(String s, String p) {        
        int len1 = s.length();
        int len2 = p.length();

        boolean [][] dp = new boolean [len1+1][len2+1];
        //初始化
        dp[0][0] = true;
        for(int i=2; i&lt;=len2; i++){
            dp[0][i] = p.charAt(i-1) == '*' &amp;&amp; dp[0][i-2];           
        }
        for(int i=0; i&lt;len1; i++){
            for(int j=0; j&lt;len2; j++){
                if(p.charAt(j) == '*'){
                    dp[i+1][j+1] = dp[i+1][j-1] || (dp[i][j+1] &amp;&amp; (s.charAt(i)==p.charAt(j-1) || p.charAt(j-1) == '.')) ;
                }else{
                    dp[i+1][j+1] = dp[i][j]  &amp;&amp; (s.charAt(i)==p.charAt(j) || p.charAt(j) == '.') ;
                }
            }
        }
        return dp[len1][len2];

    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP11 通配符匹配]]></title>
        <id>https://southton.github.io/starry/post/dp11/</id>
        <link href="https://southton.github.io/starry/post/dp11/">
        </link>
        <updated>2020-05-04T14:04:07.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '<em>' 的通配符匹配。<br>
'?' 可以匹配任何单个字符。<br>
'</em>' 可以匹配任意字符串（包括空字符串）。<br>
两个字符串完全匹配才算匹配成功。</p>
<p>说明:</p>
<ul>
<li>s 可能为空，且只包含从 a-z 的小写字母。</li>
<li>p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。</li>
</ul>
<p>示例 1:<br>
输入:<br>
s = &quot;aa&quot;<br>
p = &quot;a&quot;<br>
输出: false<br>
解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</p>
<p>示例 2:<br>
输入:<br>
s = &quot;aa&quot;<br>
p = &quot;<em>&quot;<br>
输出: true<br>
解释: '</em>' 可以匹配任意字符串。</p>
<p>示例 3:<br>
输入:<br>
s = &quot;cb&quot;<br>
p = &quot;?a&quot;<br>
输出: false<br>
解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。</p>
<p>示例 4:<br>
输入:<br>
s = &quot;adceb&quot;<br>
p = &quot;<em>a</em>b&quot;<br>
输出: true<br>
解释: 第一个 '<em>' 可以匹配空字符串, 第二个 '</em>' 可以匹配字符串 &quot;dce&quot;.</p>
<p>示例 5:<br>
输入:<br>
s = &quot;acdcb&quot;<br>
p = &quot;a*c?b&quot;<br>
输入: false</p>
<p>来源：<a href="https://leetcode-cn.com/problems/wildcard-matching">力扣：通配符匹配</a></p>
<p>思路：<br>
1、定义动态数组的含义，对于大部分两个字符串的问题都可以用二维数组解决，本题可以采用二维布尔数组来解决，定义dp[i][j]表示s的前i个元素和p的前j个元素是否匹配<br>
2、找数组元素之间的关系<br>
当s[i]=p[j]或p[j]='?'时dp[i][j] = dp[i-1][j-1]<br>
当p[j] = '<em>'时，dp[i][j] = dp[i-1][j]或者dp[i][j-1]<br>
3、初始化<br>
当s为空时，若p以</em>开头则dp[0][i]为true<br>
当p为空时，dp[i][0] = false,java布尔数组初始值即为false，所以不必单独处理<br>
code：</p>
<pre><code>class Solution {
    public boolean isMatch(String s, String p) {        
        int len1 = s.length();
        int len2 = p.length();
        //dp[i][j]表示s的前i个元素和p的前j个元素是否匹配
        boolean [][] dp = new boolean[len1+1][len2+1];
        //给dp数组赋初始值
        dp[0][0] = true;
        for(int i=1;i&lt;=len2;i++){
            dp[0][i] =  dp[0][i-1] &amp;&amp; p.charAt(i-1)=='*' ;
        }
        for(int i=1; i&lt;=len1; i++){
            for(int j=1; j&lt;=len2; j++){
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '?'){
                    dp[i][j] = dp[i-1][j-1];
                } else if(p.charAt(j-1) == '*'){
                    dp[i][j] = dp[i][j-1] || dp[i-1][j];
                }
            }
        }
        return dp[len1][len2];
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP10 编辑距离]]></title>
        <id>https://southton.github.io/starry/post/dp10/</id>
        <link href="https://southton.github.io/starry/post/dp10/">
        </link>
        <updated>2020-04-30T11:20:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="编辑距离">编辑距离</h3>
<p>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。<br>
你可以对一个单词进行如下三种操作：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<p>示例 1：<br>
输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;<br>
输出：3<br>
解释：<br>
horse -&gt; rorse (将 'h' 替换为 'r')<br>
rorse -&gt; rose (删除 'r')<br>
rose -&gt; ros (删除 'e')</p>
<p>示例 2：<br>
输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;<br>
输出：5<br>
解释：<br>
intention -&gt; inention (删除 't')<br>
inention -&gt; enention (将 'i' 替换为 'e')<br>
enention -&gt; exention (将 'n' 替换为 'x')<br>
exention -&gt; exection (将 'n' 替换为 'c')<br>
exection -&gt; execution (插入 'u')</p>
<p>来源：<a href="https://leetcode-cn.com/problems/edit-distance">力扣：编辑距离</a></p>
<p>思路：<br>
1、定义动态数组的含义，利用二维数组<br>
dp[i][j] 表示word1长度为i,word2长度为j时，将word1转换成word2的最少操作数<br>
2、找数组元素之间的关系，可分两种情况：<br>
    1）word1和word2相等时则：dp[i][j]  = dp[i-1][j-1]<br>
    2）word1和word2不相等时，dp[i][j]等于以下3种情况中的最小值：</p>
<ul>
<li>插入一个字符 dp[i][j-1] + 1</li>
<li>删除一个字符 dp[i-1][j] + 1</li>
<li>替换一个字符 dp[i-1][j-1] + 1</li>
</ul>
<p>3、给数组赋初值，即dp[0][i]和dp[i][0]、即就是word1为&quot;&quot;时和word2为&quot;&quot;时的情况，也就是不断的插入和删除操作。</p>
<p>code：</p>
<pre><code>class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        int [][] dp = new int [len1+1][len2+1];     
        //赋初始值    
        for (int i = 1; i &lt;= len2; i++) dp[0][i] = dp[0][i-1] +1; 
        for (int i = 1; i &lt;= len1; i++) dp[i][0] = dp[i-1][0] +1; 
        for (int i = 1; i &lt;= len1; i++) {
            for (int j = 1; j &lt;= len2; j++) {
                if (word1.charAt(i-1) == word2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = Math.min(dp[i][j-1], Math.min(dp[i-1][j],dp[i-1][j-1]))+1;                    
                }
            }
        }
        return dp[len1][len2];
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP09 买卖股票的最佳时机]]></title>
        <id>https://southton.github.io/starry/post/dp09/</id>
        <link href="https://southton.github.io/starry/post/dp09/">
        </link>
        <updated>2020-04-23T10:34:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-买卖股票的最佳时机-i">一、 买卖股票的最佳时机 I</h3>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>
如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。<br>
注意：你不能在买入股票前卖出股票。</p>
<p>示例 1:<br>
输入: [7,1,5,3,6,4]<br>
输出: 5<br>
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>
注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</p>
<p>示例 2:<br>
输入: [7,6,4,3,1]<br>
输出: 0<br>
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock">力扣：买卖股票的最佳时机 I</a></p>
<p>思路1：直接暴力循环，第i天的最大利润等于第i天的股票价值减去之前i-(0到i)天股票差值中的最大值，这其中的最大值便是买卖该支股票所能获得的最大利润，时间复杂度O(n^2),空间复杂度O(1).<br>
code2：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length&lt;=1) return 0;
        int max = 0;
        for (int i = 1; i &lt; prices.length; i++) {
            int tmp = 0;
            for (int j = 0; j &lt; i; j++) {
                tmp = tmp&gt;(prices[i] -prices[j])?tmp:(prices[i] -prices[j]);
            }
            //更新最大值
            max = Math.max(max, tmp);
        }
        return max;
    }
}
</code></pre>
<p>思路2：上面的思路虽直接明了，但时间复杂度太高，根据常识想要获得利润最高，在最低价格买入最高价格卖出便是，于是可以在循环过程中记下最低价格的同时更新最大利润，时间复杂度O(n)，空间复杂度O(1)。<br>
code2：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length&lt;=1) return 0;
        int max = 0;//记录买卖股票最大利润
        int min = Integer.MAX_VALUE;//记录股票的最低价格
        for (int i = 0; i &lt; prices.length; i++) {
            if (prices[i]&lt;min) {
                min = prices[i] ; 
            } else if (prices[i]-min&gt;max) {
                max = prices[i]-min;
            }           
        }
        return max;
    }
}
</code></pre>
<h3 id="二-买卖股票的最佳时机-ii">二、买卖股票的最佳时机 II</h3>
<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [7,1,5,3,6,4]<br>
输出: 7<br>
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p>
<p>示例 2:<br>
输入: [1,2,3,4,5]<br>
输出: 4<br>
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
<p>示例 3:<br>
输入: [7,6,4,3,1]<br>
输出: 0<br>
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>
<p>提示：</p>
<ul>
<li>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</li>
<li>0 &lt;= prices[i] &lt;= 10 ^ 4</li>
</ul>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii">力扣：买卖股票的最佳时机 II</a></p>
<p>思路1：一开始选择暴力求解，无奈一时没有穷举出所有可能情况，越想越复杂，没想到暴力解法对于这道题而言并不是最简单的方法，只好另寻他法；在买入以后的每天如果在涨就不卖，如果跌了那么就在跌的前一天卖出，在跌的这天重新买入，这时的收益是最大的，这种情况可以换一种想法，那就是如果股票持续上涨，那么每天都进行买卖，这种想法虽然不和题目要求但是效果是相同的；用示例2举例：<br>
max = (5-1) = (2-1)+(3-2)+(4-3)+(5-4) = 4<br>
最大利润 = [如果过程在涨就暂时不卖，到最后再卖]   =[每天进行买卖]<br>
code1：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length&lt;=1) return 0;
        int max = 0;
        for(int i=1;i&lt;prices.length;i++){
            if(prices[i]&gt;prices[i-1]) max += prices[i]-prices[i-1]; 
        }
        return max;
    }
}
</code></pre>
<p>思路2：动态规划<br>
1、dp[i]表示到第i天时买卖股票所得最大利润<br>
2、如果股票上涨则卖出，如果跌则不作任何操作，即<br>
涨：dp[i] = dp[i - 1] + prices[i] - prices[i - 1];<br>
跌：dp[i] = dp[i - 1]<br>
3、初始时没有买卖股票，dp[0] = 0;<br>
code2：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length&lt;=1) return 0;
        int len = prices.length;
        int[] dp = new int[len]; //收益
        dp[0] = 0;
        for (int i = 1; i &lt; len; i++) {
            if (prices[i] - prices[i - 1] &gt; 0){
                dp[i] = dp[i - 1] + prices[i] - prices[i - 1];
            }else {
                dp[i] = dp[i - 1];
            }
        }
        return dp[len - 1];
    }
}
</code></pre>
<h3 id="三-买卖股票的最佳时机-iii">三、买卖股票的最佳时机 III</h3>
<p>定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。<br>
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [3,3,5,0,0,3,1,4]<br>
输出: 6<br>
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</p>
<p>示例 2:<br>
输入: [1,2,3,4,5]<br>
输出: 4<br>
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  <br>
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>
<p>示例 3:<br>
输入: [7,6,4,3,1]<br>
输出: 0<br>
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii">力扣：买卖股票的最佳时机 III</a></p>
<p>思路：见代码<br>
code :</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length &lt; 2) return 0;
        int len = prices.length;        
        int[][] dp = new int[len][3];
        for (int k = 1; k &lt;= 2; k++) {
            int min = prices[0];
            for (int i = 1; i &lt; len; i++) {               
                min = Math.min(prices[i] - dp[i][k - 1], min);
                dp[i][k] = Math.max(dp[i - 1][k], prices[i] - min);
            }
        }
        return dp[len - 1][2];
    }
}
</code></pre>
<h3 id="四-买卖股票的最佳时机-iv">四、买卖股票的最佳时机 IV</h3>
<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。<br>
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。<br>
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p>示例 1:<br>
输入: [2,4,1], k = 2<br>
输出: 2<br>
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</p>
<p>示例 2:<br>
输入: [3,2,6,5,0,3], k = 2<br>
输出: 7<br>
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv">力扣：买卖股票的最佳时机 IV</a></p>
<p>思路：见代码<br>
code：</p>
<pre><code>public class Solution {
    public int maxProfit(int k, int[] prices) {
        int res = 0;
        if (k &gt;= prices.length / 2) {
            for (int i = 1; i &lt; prices.length; i++) {
                if (prices[i] &gt; prices[i - 1]) {
                    res += prices[i] - prices[i - 1];
                }
            }
            return res;
        }       
        res = 0;
        int[][][] dp = new int[prices.length][k + 1][2];
        for (int i = 0; i &lt; prices.length; i++) {//第几天
            for (int j = 1; j &lt;= k; j++) { //交易次数
                if (i == 0) {
                    dp[0][j][0] = 0;    //0为不持有，1为持有
                    dp[0][j][1] = -prices[0]; 
                    continue;
                }
                dp[i][j][0] = Math.max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);
                dp[i][j][1] = Math.max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i]);
                res = Math.max(res, dp[i][j][0]);
            }
        }
        return res;
    }
}
</code></pre>
<h3 id="五-最佳买卖股票时机含冷冻期">五、最佳买卖股票时机含冷冻期</h3>
<p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​<br>
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:<br>
你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br>
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</p>
<p>示例:<br>
输入: [1,2,3,0,2]<br>
输出: 3<br>
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</p>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown">力扣：最佳买卖股票时机含冷冻期</a></p>
<p>思路：<br>
1、dp0[i]:表示第i天（包含第i天）之前，买卖股票所得最大利润，最后一次操作是买入<br>
dp1[i]:表示第i天（包含第i天）之前，买卖股票所得最大利润，最后一次操作是卖出<br>
2、找关系<br>
dp0[i] = Math.max(dp0[i - 1], -prices[i]);<br>
dp0[i] = Math.max(dp0[i], dp1[i - 2] - prices[i])  考虑冷冻期<br>
dp1[i] = Math.max(dp1[i - 1], dp0[i - 1] + prices[i]);<br>
3、初始化<br>
dp0[0]=-prices[0];<br>
dp1[0] = 0<br>
code：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length &lt; 2) return 0;
        int n = prices.length;
        int[] dp0 = new int[n];
        int[] dp1 = new int[n];
        dp0[0] = -prices[0];
        dp1[0] = 0;
        for (int i = 1; i &lt; dp1.length; i++) {
            dp0[i] = Math.max(dp0[i - 1], -prices[i]);
            if (i &gt;= 2) dp0[i] = Math.max(dp0[i], dp1[i - 2] - prices[i]);
            dp1[i] = Math.max(dp1[i - 1], dp0[i - 1] + prices[i]);
        }
        return dp1[n - 1];
    }
}
</code></pre>
<h3 id="六-买卖股票的最佳时机含手续费">六、买卖股票的最佳时机含手续费</h3>
<p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。返回获得利润的最大值。<br>
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>
<p>示例 1:<br>
输入: prices = [1, 3, 2, 8, 4, 9], fee = 2<br>
输出: 8<br>
解释: 能够达到的最大利润:<br>
在此处买入 prices[0] = 1<br>
在此处卖出 prices[3] = 8<br>
在此处买入 prices[4] = 4<br>
在此处卖出 prices[5] = 9<br>
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p>
<p>注意:</p>
<ul>
<li>0 &lt; prices.length &lt;= 50000.</li>
<li>0 &lt; prices[i] &lt; 50000.</li>
<li>0 &lt;= fee &lt; 50000.</li>
</ul>
<p>来源：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee">力扣：买卖股票的最佳时机含手续费</a></p>
<p>思路：<br>
1、dp0[i]:表示第i天（包含第i天）之前，买卖股票所得最大利润，最后一次操作是买入<br>
dp1[i]:表示第i天（包含第i天）之前，买卖股票所得最大利润，最后一次操作是卖出<br>
2、找关系<br>
dp1[i] = Math.max(dp1[i-1], dp0[i-1]+prices[i]-fee);<br>
dp0[i] = Math.max(dp0[i-1], dp1[i-1]-prices[i]);<br>
3、初始化<br>
dp0[0]=-prices[0];<br>
dp1[0] = 0<br>
code：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices, int fee) {
        if (prices.length &lt; 2) return 0;
        int len = prices.length;
        int[] dp0 =new int[len];
        int[] dp1 = new int[len];
        dp0[0] =-prices[0];
        dp1[0] = 0; 
        for (int i = 1; i &lt; prices.length; i++) {
            dp1[i] = Math.max(dp1[i-1], dp0[i-1]+prices[i]-fee);
            dp0[i] = Math.max(dp0[i-1], dp1[i-1]-prices[i]);
        }        
        return dp1[len-1];
    }
}
</code></pre>
<p>思路2：优化，每天的状态只与前一天的状态有关<br>
code2：</p>
<pre><code>class Solution {
    public int maxProfit(int[] prices, int fee) {
        if (prices.length &lt; 2) return 0;
        int dp0 =-prices[0];
        int dp1 = 0; 
        for (int i = 1; i &lt; prices.length; i++) {
            dp1 = Math.max(dp1, dp0+prices[i]-fee);
            dp0 = Math.max(dp0, dp1-prices[i]);
        }        
        return dp1;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP08 打家劫舍]]></title>
        <id>https://southton.github.io/starry/post/dp08/</id>
        <link href="https://southton.github.io/starry/post/dp08/">
        </link>
        <updated>2020-04-20T08:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="打家劫舍-i">打家劫舍 I</h3>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>
<p>示例 1:<br>
输入: [1,2,3,1]<br>
输出: 4<br>
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>
     偷窃到的最高金额 = 1 + 3 = 4 。</p>
<p>示例 2:<br>
输入: [2,7,9,3,1]<br>
输出: 12<br>
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/house-robber">力扣：打家劫舍</a></p>
<p>思路：采用动态规划<br>
1、定义动态数组的含义：dp[i]表示打劫到第i家时打劫的最大金额<br>
2、找动态数组间元素的关系，由题意不能连着打劫两家，故dp[i]为下面两种情况中的最大值</p>
<ul>
<li>1）打劫当前家，即dp[i-2]+nums[i]</li>
<li>2）不打劫当前家，即dp[i-1]</li>
</ul>
<pre><code>dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
</code></pre>
<p>3、给动态数组元素赋初值，这里的初始值有两个，即第一家和第二家，打劫第一家时dp[0] =nums[0];，打劫第二家时，为第二家和第一家中的最大值dp[1] =Math.max(nums[0],nums[1]);<br>
时间复杂度和空间复杂度均为O(n)。<br>
code：</p>
<pre><code>class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        int n = nums.length;
        int[] dp = new int[n+1];
        dp[0] =nums[0];
        dp[1] =Math.max(nums[0],nums[1]);
        for (int i = 2; i &lt; n; i++) {
            dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        return dp[n-1];
    }
}
</code></pre>
<p>优化：上述思路可以发现每次在更新dp[i]的时候，只会用到dp[i-2]和nums[i],因此可以用两个变量，一个存储最大值，一个存储dp[i-2];时间复杂度O(n)，空间复杂度O(1)。<br>
code2：</p>
<pre><code>class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;        
        int max= 0; //保存最大值
        int pre = 0;  //保存dp[i-2]
        for (int i : nums) {
            int tmp = max;
            max = Math.max(max, pre+i);
            pre = tmp;
        }  
        return max;
    }
}
</code></pre>
<h3 id="打家劫舍-ii">打家劫舍 II</h3>
<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br>
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p>
<p>示例 1:<br>
输入: [2,3,2]<br>
输出: 3<br>
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</p>
<p>示例 2:<br>
输入: [1,2,3,1]<br>
输出: 4<br>
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。<br>
     偷窃到的最高金额 = 1 + 3 = 4 。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/house-robber-ii/">力扣：打家劫舍 II</a></p>
<p>思路：这里第一家和最后一家也相邻，因此可以分别去掉第一家和最后一家后进行动态规划,返回两种情况中的最大值；<br>
code:</p>
<pre><code>class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) {
            return 0;
        } else if (nums.length == 1){
            return nums[0];
        }else if (nums.length == 2){
            return Math.max(nums[0], nums[1]) ;
        }            
        int n = nums.length;
        int[] dp = new int[n + 1];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i &lt; n; i++) { //打劫第一家
            dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        int[] dp2 = new int[n + 1];
        dp2[1] = nums[1];
        dp2[2] = Math.max(nums[1],nums[2]);
        for (int i = 3; i &lt; n; i++) { //不打劫第一家
            dp2[i] = Math.max(dp2[i - 1], nums[i] + dp2[i - 2]);
        }
        return Math.max(dp[n - 2], dp2[n - 1]);
    }
}
</code></pre>
<p>思路2：对空间进行优化<br>
code：</p>
<pre><code>class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) {
            return 0;
        } else if (nums.length == 1){
            return nums[0];
        }else if (nums.length == 2){
            return Math.max(nums[0], nums[1]) ;
        }
        int max1 = 0;
        int pre1 = 0;        
        for (int i = 0; i &lt; nums.length-1; i++) {
            int tmp1 = max1;
            max1 = Math.max(max1, pre1 + nums[i]);
            pre1 = tmp1;
        }
        int max2 = 0;
        int pre2 = 0;
        for (int i = 1; i &lt; nums.length; i++) {
            int tmp2 = max2;
            max2 = Math.max(max2, pre2 + nums[i]);
            pre2 = tmp2;
        }
        return Math.max(max1, max2);
    }
}
</code></pre>
<h3 id="打家劫舍-iii">打家劫舍 III</h3>
<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。<br>
计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>
<p>示例 1:<br>
输入: [3,2,3,null,3,null,1]<br>
<img src="https://southton.github.io/starry/post-images/1587549173309.png" alt="" loading="lazy"><br>
输出: 7<br>
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.</p>
<p>示例 2:<br>
输入: [3,4,5,1,3,null,1]<br>
<img src="https://southton.github.io/starry/post-images/1587549196540.png" alt="" loading="lazy"><br>
输出: 9<br>
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.</p>
<p>来源：<a href="https://leetcode-cn.com/problems/house-robber-iii">力扣：打家劫舍 III</a></p>
<p>思路：递归+动态规划<br>
递归遍历二叉树的每一个节点，根据题目要求，每个节点有两种状态，即偷或者不偷，用一个数组0表示不偷，1表示偷，故任何一个节点能偷到的最大金额分为两种情况：<br>
当前节点不偷：最大能偷金额=左孩子能偷到的最大金额+右孩子能偷到的最大金额<br>
当前节点偷：最大能偷金额=当前节点金额+左孩子不偷时的最大金额+右孩子不偷时的最大金额<br>
code：</p>
<pre><code>/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int rob(TreeNode root) {
        int[] max = helper(root);
        return Math.max(max[0], max[1]);
    }

    public int[] helper(TreeNode root) {
        if (root == null) return new int[2];
        int[] max = new int[2];
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        max[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);//当前节点不偷
        max[1] = left[0] + right[0] + root.val;//当前节点偷
        return max;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP07 俄罗斯套娃信封问题]]></title>
        <id>https://southton.github.io/starry/post/dp07/</id>
        <link href="https://southton.github.io/starry/post/dp07/">
        </link>
        <updated>2020-04-18T03:51:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="俄罗斯套娃信封问题">俄罗斯套娃信封问题</h3>
<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。<br>
请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。<br>
说明:不允许旋转信封。</p>
<p>示例:<br>
输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]<br>
输出: 3<br>
解释: 最多信封的个数为 3, 组合为: [2,3] =&gt; [5,4] =&gt; [6,7]。</p>
<p>来源：<a href="https://leetcode-cn.com/problems/russian-doll-envelopes/">力扣：俄罗斯套娃信封问题</a></p>
<p>思路：排序后按最长子序列处理<br>
dp[i] 表示dp[i]表示第i个信封能套的最大信封数<br>
code：</p>
<pre><code>class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if (envelopes.length &lt; 2) return envelopes.length;
        int n = envelopes.length;
        Arrays.sort(envelopes, new Comparator&lt;int[]&gt;() {
            @Override
            public int compare(int[] o1, int[] o2) { // 自定义一个排序器按宽度进行升序排序
                if (o1[0] == o2[0])
                    return o2[1] - o1[1]; // 宽度相等时按高度降序排序
                return o1[0] - o2[0];
            }
        });
        int[] dp = new int[n];// dp[i]表示第i个信封能套的最大信封数        
        int max = 1;//记录最大值
        for (int i = 0; i &lt; n; i++) {
            dp[i] = 1;//初始化
            for (int j = 0; j &lt; i; j++) {
                if ( envelopes[i][1] &gt; envelopes[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            max = max&gt;dp[i]?max:dp[i];
        }
        return max;
    }
}
</code></pre>
]]></content>
    </entry>
</feed>